package sample;

import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.stream.Collectors;
import java.util.stream.Stream;

/**
 * Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:
 *
 * 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
 *
 * By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.
 */
public class Problem2 {
    public static void main(String[] args) {
        System.out.println(getEvenFibonacciNumbersSum(BigInteger.valueOf(4000000)));
        System.out.println(getEvenFibonacciNumbersSumByStreams(BigInteger.valueOf(4000000)));
    }
    private static BigInteger getEvenFibonacciNumbersSum(BigInteger limit){
        if (limit.compareTo(BigInteger.ZERO) > 2)
            return BigInteger.ZERO;
        
        BigInteger evenFactor1 = BigInteger.ZERO, evenFactor2 = BigInteger.valueOf(2);
        BigInteger sum = evenFactor1.add(evenFactor2);

        while (limit.compareTo(evenFactor2)>=0)
        {
            BigInteger ef3 = BigInteger.valueOf(4).multiply(evenFactor2).add(evenFactor1);

            if (limit.compareTo(ef3)<0)
                break;

            evenFactor1 = evenFactor2;
            evenFactor2 = ef3;
            sum = sum.add(evenFactor2);
        }

        return sum;
    }

    private static BigInteger getEvenFibonacciNumbersSumByStreams(BigInteger limit){
        return Stream.iterate(new BigInteger[]{ BigInteger.ONE, BigInteger.valueOf(2) },
                p->new BigInteger[]{ p[1], p[0].add(p[1]) }).map(p -> p[0])
                .limit(92)
                .filter(p-> p.compareTo(limit) < 0 && p.mod(BigInteger.valueOf(2)).compareTo(BigInteger.ZERO) ==0)
                .reduce(BigInteger.ZERO, BigInteger::add);
    }

}
